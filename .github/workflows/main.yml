name: base

on:
  push:
    branches: [ "main" ]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*


jobs:
  build:
    name: build

    runs-on: ubuntu-20.04

    container:
      image: centos:7.9.2009
      options: --user root

    env:
      R_VERSION: "4.2.0"
      READLINE_VERSION: "8.2"
      UNIXODBC_VERSION: "2.3.9"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Prepare environment
        run: |
          yum update -y && yum makecache && yum clean all
          yum install -y gcc gcc-c++ kernel-devel dnf make
          yum install -y epel-release 
          yum install -y Lmod git curl wget
          yum install -y libgfortran5 readline readline-devel libicu-devel
          useradd -m sherlock
      - name: Upgrade libstdc++ to version 8
        run: |
          yum install -y centos-release-scl
          yum install -y devtoolset-8-libstdc++-devel
          ln -s /opt/rh/devtoolset-8/root/usr/lib64/libstdc++.so.6 /usr/lib64/libstdc++.so.6
      - name: Install libicu67 from source
        run: |
          wget https://github.com/unicode-org/icu/releases/download/release-67-1/icu4c-67_1-src.tgz
          tar -xzf icu4c-67_1-src.tgz
          cd icu/source
          ./configure --prefix=/usr/local --disable-debug --disable-samples
          make
          make install
          echo "/usr/local/lib" > /etc/ld.so.conf.d/local.conf
          ldconfig
      - name: Install Readline 8 from source
        run: |
          wget https://ftp.gnu.org/gnu/readline/readline-${{ env.READLINE_VERSION }}.tar.gz
          tar -xzf readline-${{ env.READLINE_VERSION }}.tar.gz
          cd readline-${{ env.READLINE_VERSION }}
          ./configure --prefix=/usr/local
          make
          make install
          echo "/usr/local/lib" >> /etc/ld.so.conf.d/local.conf
          ldconfig
      - name: Download and install unixODBC
        run: |
          curl -O ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-${{ env.UNIXODBC_VERSION }}.tar.gz
          tar xf unixODBC-${{ env.UNIXODBC_VERSION }}.tar.gz
          cd unixODBC-${{ env.UNIXODBC_VERSION }}
          ./configure --prefix=/usr --sysconfdir=/etc/unixODBC
          make
          make install
          find doc -name "Makefile*" -delete
          chmod 644 doc/{lst,ProgrammerManual/Tutorial}/*
          install -v -m755 -d /usr/share/doc/unixODBC-${{ env.UNIXODBC_VERSION }}
          cp -v -R doc/* /usr/share/doc/unixODBC-${{ env.UNIXODBC_VERSION }}
      - name: Install R
        run: | 
          export R_VERSION=${{ env.R_VERSION }}
          curl -O https://cdn.rstudio.com/r/rhel-9/pkgs/R-${{ env.R_VERSION }}-1-1.x86_64.rpm
          dnf install -y R-${{ env.R_VERSION }}-1-1.x86_64.rpm
          ln -s /opt/R/${{ env.R_VERSION }}/bin/R /usr/local/bin/R
          ln -s /opt/R/${{ env.R_VERSION }}/bin/Rscript /usr/local/bin/Rscript
      - name: Create unixODBC module
        run: |
          mkdir -p /home/sherlock/.local/share/modulefiles/unixodbc
          echo "setenv('ODBC_HOME', '/usr')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "prepend_path('PATH', '/usr/bin')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "prepend_path('LD_LIBRARY_PATH', '/usr/lib64')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "prepend_path('PKG_CONFIG_PATH', '/usr/lib64/pkgconfig')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "setenv('ODBCSYSINI', '/etc/unixODBC')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
      - name: Create Lua module for R version
        run: |
          mkdir -p /home/sherlock/.local/share/modulefiles/R
          echo "setenv('R_HOME', '/opt/R/${{ env.R_VERSION }}')" >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
          echo "prepend_path('PATH', '/opt/R/${{ env.R_VERSION }}/bin')" >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
          echo "prepend_path('LD_LIBRARY_PATH', '/opt/R/${{ env.R_VERSION }}/lib64')" >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
        shell: bash
      - name: Prepare the environment
        run: |
          su - sherlock 
          echo "export MODULEPATH=/home/sherlock/.local/share/modulefiles:\$MODULEPATH" >> /home/sherlock/.bashrc
          echo "module use --append /home/sherlock/.local/share/modulefiles/"  >> /home/sherlock/.bashrc
          echo "source /etc/profile.d/z00_lmod.sh" >> /home/sherlock/.bashrc
      - name: Test R module
        run: |
          su - sherlock 
          source /home/sherlock/.bashrc
          echo $MODULEPATH
          module spider
      - name: Install the package
        run: |
          su - sherlock 
          source /home/sherlock/.bashrc
          git clone https://github.com/the-tobias-project/odbc-module
          cd odbc-module && make install check=false
      - name: Configure
        run: |
          su - sherlock 
          source /home/sherlock/.bashrc
          cd odbc-module && make configure group=false
      - name: Setenv
        run: |
          su - sherlock
          source /home/sherlock/.bashrc
          make setenv group=false
          module spider databricks | grep R/${{ inputs.R_VERSION }}
