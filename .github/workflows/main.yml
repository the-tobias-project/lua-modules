name: base

on:
  push:
    branches: [ "main" ]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*


jobs:
  build:
    name: build

    runs-on: ubuntu-20.04

    container:
      image: centos:7.9.2009
      options: --user root

    env:
      R_VERSION: "4.2.0"
      READLINE_VERSION: "8.2"
      UNIXODBC_VERSION: "2.3.9"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Prepare environment
        run: |
          yum update -y && yum makecache && yum clean all
          yum install -y gcc gcc-c++ kernel-devel dnf make cmake 
          yum install -y epel-release 
          yum install -y Lmod git curl wget
          yum install -y libgfortran5 readline readline-devel  libicu libicu-devel gcc-gfortran zlib-devel bzip2-devel \
                         libcurl-devel xz-devel pcre2-devel ncurses-devel texinfo gtk+-devel gtk2-devel qt-devel tcl-devel tk-devel \
                         kernel-headers kernel-devel readline-devel unixODBC-devel
          #yum install -y R
          useradd -m sherlock
      - name: Update devtoolset
        run: | 
          wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-rh-2-3.el7.centos.noarch.rpm
          wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/centos-release-scl-2-3.el7.centos.noarch.rpm
          rpm -ivh centos-release-scl-rh-2-3.el7.centos.noarch.rpm
          rpm -ivh centos-release-scl-2-3.el7.centos.noarch.rpm
          yum -y install centos-release-scl
          yum -y install devtoolset-10
          scl enable devtoolset-10 bash
      - name: Download and install unixODBC
        run: |
          curl -O ftp://ftp.unixodbc.org/pub/unixODBC/unixODBC-${{ env.UNIXODBC_VERSION }}.tar.gz
          tar xf unixODBC-${{ env.UNIXODBC_VERSION }}.tar.gz
          cd unixODBC-${{ env.UNIXODBC_VERSION }}
          ./configure --prefix=/usr --sysconfdir=/etc/unixODBC
          make
          make install
          find doc -name "Makefile*" -delete
          chmod 644 doc/{lst,ProgrammerManual/Tutorial}/*
          install -v -m755 -d /usr/share/doc/unixODBC-${{ env.UNIXODBC_VERSION }}
          cp -v -R doc/* /usr/share/doc/unixODBC-${{ env.UNIXODBC_VERSION }}
          odbcinst --version
      - name: Install R 
        run: | 
          export R_VERSION=${{ env.R_VERSION }}
          wget https://cran.r-project.org/src/base/R-4/R-${{ env.R_VERSION }}.tar.gz
          tar xvf R-${{ env.R_VERSION }}.tar.gz
          cd R-${{ env.R_VERSION }}
          ./configure --prefix=/share/apps/R-${{ env.R_VERSION }} --with-recommended-packages=no --without-x --with-cairo --with-libpng --with-libtiff --with-jpeglib --enable-R-shlib
          make && make install
      - name: Create unixODBC module
        run: |
          mkdir -p /home/sherlock/.local/share/modulefiles/unixodbc
          echo "setenv('ODBC_HOME', '/usr')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "prepend_path('PATH', '/usr/bin')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "prepend_path('LD_LIBRARY_PATH', '/usr/lib64')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "prepend_path('PKG_CONFIG_PATH', '/usr/lib64/pkgconfig')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
          echo "setenv('ODBCSYSINI', '/etc/unixODBC')" >> /home/sherlock/.local/share/modulefiles/unixodbc/${{ env.UNIXODBC_VERSION }}.lua
      - name: Create Lua module for R version
        run: |
          mkdir -p /home/sherlock/.local/share/modulefiles/R 
          echo "setenv('R_HOME', '/share/apps/R-${{ env.R_VERSION }}')" >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
          echo "prepend_path('PATH', '/share/apps/R-${{ env.R_VERSION }}/bin')" >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
          echo "prepend_path('LD_LIBRARY_PATH', '/share/apps/R-${{ env.R_VERSION }}/lib64')" >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
          echo "setenv('R', '/usr/local/bin/R')"  >> /home/sherlock/.local/share/modulefiles/R/${{ env.R_VERSION }}.lua
        shell: bash
      - name: Prepare the environment
        run: |
          su - sherlock 
          echo "export MODULEPATH=/home/sherlock/.local/share/modulefiles:\$MODULEPATH" >> /home/sherlock/.bashrc
          echo "module use --append /home/sherlock/.local/share/modulefiles/"  >> /home/sherlock/.bashrc
          echo "source /etc/profile.d/z00_lmod.sh" >> /home/sherlock/.bashrc
      - name: Test R module
        run: |
          su - sherlock 
          source /home/sherlock/.bashrc
          echo $MODULEPATH
          module spider
          module load R/4.2.0
          R -e "print('hello')"
      - name: Configure the g++ environment
        run: |
          su - sherlock 
          mkdir -p /home/sherlock/.R
          echo "CC = /opt/rh/devtoolset-10/root/usr/bin/gcc" > /home/sherlock/.R/Makevars
          echo "CXX = /opt/rh/devtoolset-10/root/usr/bin/g++" >> /home/sherlock/.R/Makevars
          echo "CXX11 = /opt/rh/devtoolset-10/root/usr/bin/g++" >> /home/sherlock/.R/Makevars
          echo "R_MAKEVARS_USER = ~/.R/Makevars" > /home/sherlock/.Renviron
      - name: Install the package
        run: |
          su - sherlock 
          source /home/sherlock/.bashrc
          git clone https://github.com/the-tobias-project/odbc-module
          cd odbc-module && make install check=false
      - name: Configure
        run: |
          su - sherlock 
          source /home/sherlock/.bashrc
          cd odbc-module && make configure group=false
      - name: Setenv
        run: |
          su - sherlock
          source /home/sherlock/.bashrc
          make setenv group=false
          module spider databricks | grep R/${{ inputs.R_VERSION }}